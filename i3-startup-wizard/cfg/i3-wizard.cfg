# i3-Wizard — Klipper-safe Jinja2 macros (no optional modules)
# Drop-in include: [include i3-startup-wizard/i3-wizard.cfg]

# ================================================================
#                      🚨 IMPORTANT – READ THIS 🚨
#        SELECT YOUR BED SIZE (UNCOMMENT EXACTLY ONE BLOCK)
#    1) Find the I3_SIZE macro below
#    2) UNCOMMENT exactly ONE size block (250 / 300 / 350)
#    3) SAVE, then RESTART Klipper
# If you don't select one, you'll get a red error in the console.
# ================================================================

# ---------- User Variables (auto-set by I3_SIZE) ----------
[gcode_macro I3_VARS]
description: "User vars for i3-Wizard"
# Bed size will be set by I3_SIZE at startup
variable_bed_size_x: 0
variable_bed_size_y: 0
variable_purge_x: 5         # purge start X
variable_purge_y: 5         # purge start Y
variable_purge_z: 0.20      # purge height
variable_wipe_dx: 120       # purge line length (X direction)
variable_wipe_flow: 12      # total filament to extrude during purge (mm)
variable_margin_pct: 10     # keep-out margin percent from model (front/left)
gcode:
  RESPOND TYPE=command MSG="I3_VARS loaded"

# ---------- Bed Size Selector ----------
[gcode_macro I3_SIZE]
description: "UNCOMMENT exactly one size block below, then RESTART"
gcode:
  # ================= SELECT ONE =================
  # [250 mm bed]
  # SET_GCODE_VARIABLE MACRO=I3_VARS VARIABLE=variable_bed_size_x VALUE=250
  # SET_GCODE_VARIABLE MACRO=I3_VARS VARIABLE=variable_bed_size_y VALUE=250

  # [300 mm bed]
  # SET_GCODE_VARIABLE MACRO=I3_VARS VARIABLE=variable_bed_size_x VALUE=300
  # SET_GCODE_VARIABLE MACRO=I3_VARS VARIABLE=variable_bed_size_y VALUE=300

  # [350 mm bed]
  # SET_GCODE_VARIABLE MACRO=I3_VARS VARIABLE=variable_bed_size_x VALUE=350
  # SET_GCODE_VARIABLE MACRO=I3_VARS VARIABLE=variable_bed_size_y VALUE=350
  # ==============================================

  {% set bx = printer["gcode_macro I3_VARS"].variable_bed_size_x|int %}
  {% set by = printer["gcode_macro I3_VARS"].variable_bed_size_y|int %}
  {% if not (bx in [250,300,350] and by == bx) %}
    RESPOND TYPE=error MSG="I3-Wizard ❌ BED SIZE NOT SET. Edit I3_SIZE and UNCOMMENT exactly one size block (250/300/350), then RESTART."
  {% else %}
    RESPOND TYPE=command MSG="I3-Wizard ✅ Bed size set to {{bx}} mm."
  {% endif %}

# Run the size-applier once on boot
[delayed_gcode I3_ON_BOOT]
initial_duration: 1.0
gcode:
  I3_SIZE

# ---------- Helpers ----------
[gcode_macro _I3_SAFE_ABS]
gcode:
  G90

[gcode_macro _I3_SAFE_REL]
gcode:
  G91

[gcode_macro _I3_WAIT_HOTEND]
gcode:
  {% set t = params.T|default(0)|float %}
  {% if t > 0 %}
    M109 S{t}
  {% endif %}

[gcode_macro _I3_WAIT_BED]
gcode:
  {% set t = params.T|default(0)|float %}
  {% if t > 0 %}
    M190 S{t}
  {% endif %}

# ---------- PREHEAT ----------
[gcode_macro PREHEAT]
description: "PREHEAT BED=.. EXTRUDER=.. [SOAK sec]"
gcode:
  {% set bed = params.BED|default(60)|int %}
  {% set hot = params.EXTRUDER|default(200)|int %}
  {% set soak = params.SOAK|default(0)|int %}
  M117 Preheating Bed {bed} / Hotend {hot}
  M140 S{bed}
  M104 S{hot}
  _I3_WAIT_BED T={bed}
  _I3_WAIT_HOTEND T={hot}
  {% if soak > 0 %}
    M117 Soaking {soak}s
    G4 S{soak}
  {% endif %}
  M117 Preheat complete

# ---------- PURGE LINE ----------
[gcode_macro PURGE_LINE]
description: "PURGE_LINE [LENGTH=120] [FLOW=12] [Z=0.20]"
gcode:
  {% set vars = printer["gcode_macro I3_VARS"] %}
  {% set length = params.LENGTH|default(vars.variable_wipe_dx)|float %}
  {% set flow = params.FLOW|default(vars.variable_wipe_flow)|float %}
  {% set z = params.Z|default(vars.variable_purge_z)|float %}
  _I3_SAFE_ABS
  G92 E0
  G1 Z{z:.3f} F3000
  G1 X{vars.variable_purge_x} Y{vars.variable_purge_y} F6000
  G1 X{vars.variable_purge_x + length} E{flow:.3f} F1800
  G1 E-0.5 F2400
  M117 Purge line done

# ---------- PURGE LINE (Auto keep-out) ----------
[gcode_macro PURGE_LINE_AUTO]
description: "Auto purge line in front-left; keeps >= MARGIN_PCT% from model. Pass MINX,MINY,MAXX,MAXY from slicer."
gcode:
  {% set vars = printer["gcode_macro I3_VARS"] %}
  {% set bx = vars.variable_bed_size_x|int %}
  {% set by = vars.variable_bed_size_y|int %}
  {% set edge = 3 %}                          {# mechanical edge safety #}
  {% set pct = params.MARGIN_PCT|default(vars.variable_margin_pct)|float %}
  {% set margin_tmp = bx * (pct/100.0) %}
  {% set margin = margin_tmp if margin_tmp > 5 else 5 %}

  {# model bounds from slicer (Orca/SuperSlicer/PrusaSlicer can pass these) #}
  {% set minx = params.MINX|default(none) %}
  {% set miny = params.MINY|default(none) %}
  {% set maxx = params.MAXX|default(none) %}
  {% set maxy = params.MAXY|default(none) %}

  {# choose a Y row in the front, staying margin away from model's MINY if provided #}
  {% if miny is not none %}
    {% set y_allowed = miny|float - margin %}
  {% else %}
    {% set y_allowed = 99999 %}
  {% endif %}
  {% set target_y = y_allowed %}
  {% if target_y > by - edge %}{% set target_y = by - edge %}{% endif %}
  {% if target_y < edge %}{% set target_y = edge %}{% endif %}

  {# choose maximum X end so we stay left of the model by margin #}
  {% if minx is not none %}
    {% set x_end_max = (minx|float - margin) %}
  {% else %}
    {% set x_end_max = bx - edge %}
  {% endif %}
  {% if x_end_max < edge + 20 %}  {# too tight; shrink length but keep > 20mm or just edge #}
    {% set x_end_max = edge + 20 %}
  {% endif %}

  {% set start_x = edge %}
  {% set start_y = target_y %}
  {% set length = (x_end_max - start_x) %}
  {% if length < 20 %}{% set length = 20 %}{% endif %}

  {% set flow = params.FLOW|default(vars.variable_wipe_flow)|float %}
  {% set z = params.Z|default(vars.variable_purge_z)|float %}

  _I3_SAFE_ABS
  G92 E0
  G1 Z{{ '%.3f'|format(z) }} F3000
  G1 X{{ '%.3f'|format(start_x) }} Y{{ '%.3f'|format(start_y) }} F6000
  G1 X{{ '%.3f'|format(start_x + length) }} E{{ '%.3f'|format(flow) }} F1800
  G1 E-0.5 F2400
  M117 Purge auto done (y={{ '%.1f'|format(start_y) }}, len={{ '%.0f'|format(length) }}, margin={{ '%.0f'|format(margin) }}mm)

# ---------- PRINT_START ----------
[gcode_macro PRINT_START]
description: "PRINT_START [BED=..] [EXTRUDER=..] [PURGE=1|0] [MINX/MINy/MAXX/MAXY from slicer]"
gcode:
  {% set bed = params.BED|default(60)|int %}
  {% set hot = params.EXTRUDER|default(200)|int %}
  {% set do_purge = params.PURGE|default(1)|int %}
  M117 Print Start
  _I3_SAFE_ABS
  M107
  G28
  _I3_WAIT_BED T={bed}
  _I3_WAIT_HOTEND T={hot}
  {% if do_purge == 1 %}
    {% if 'MINX' in params and 'MINY' in params %}
      PURGE_LINE_AUTO MINX={params.MINX} MINY={params.MINY} MAXX={params.MAXX|default(params.MINX)} MAXY={params.MAXY|default(params.MINY)}
    {% else %}
      PURGE_LINE
    {% endif %}
  {% endif %}
  M117 Printing…

# ---------- PRINT_END ----------
[gcode_macro PRINT_END]
description: "Safe end: retract & park"
gcode:
  _I3_SAFE_ABS
  G92 E0
  G1 E-1.0 F2400
  M104 S0
  M140 S0
  M107
  G91
  G1 Z10 F3000
  G90
  G1 X10 Y{printer["gcode_macro I3_VARS"].variable_bed_size_y|int - 10} F6000
  M117 Done

# ---------- PA TUNE (Line) ----------
[gcode_macro PA_TUNE]
description: "PA_TUNE START=0.00 END=0.12 STEP=0.01 LENGTH=160 SPEED=150 LAYER=0.20"
gcode:
  {% set start_pa = params.START|default(0.00)|float %}
  {% set end_pa   = params.END|default(0.12)|float %}
  {% set step     = params.STEP|default(0.01)|float %}
  {% set length   = params.LENGTH|default(160)|float %}
  {% set speed    = params.SPEED|default(150)|float %}
  {% set layer_h  = params.LAYER|default(0.20)|float %}

  M117 PA Tune Start
  _I3_SAFE_ABS
  G28
  G1 Z{layer_h:.3f} F3000
  G1 X10 Y10 F6000
  G92 E0

  {% set count = int(((end_pa - start_pa) / step) + 1) %}
  {% for i in range(count) %}
    {% set pa = (start_pa + i*step) %}
    SET_PRESSURE_ADVANCE ADVANCE={pa|round(3)}
    M117 PA={pa|round(3)}
    G1 X{10 + length} E10 F{(speed*60)|int}
    G1 X10 E1.0 F{(speed*60)|int}
  {% endfor %}
  M117 PA Tune Done

# ================================================================
#                          INPUT SHAPER
#   Safe helpers that only run if Input Shaper + Resonance Tester
#   are configured in printer.cfg. Otherwise they warn clearly.
# ================================================================

[gcode_macro IS_STATUS]
description: "Show current Input Shaper config from printer.cfg"
gcode:
  {% set s = printer.configfile.settings %}
  {% if 'input_shaper' in s %}
    {% set is = s['input_shaper'] %}
    RESPOND TYPE=command MSG="IS: shaper_type_x={{ is.get('shaper_type_x','?') }}, freq_x={{ is.get('shaper_freq_x','?') }} Hz"
    RESPOND TYPE=command MSG="IS: shaper_type_y={{ is.get('shaper_type_y','?') }}, freq_y={{ is.get('shaper_freq_y','?') }} Hz"
  {% else %}
    RESPOND TYPE=error MSG="No [input_shaper] section found in printer.cfg"
  {% endif %}

[gcode_macro IS_TUNE_AXIS]
description: "Run SHAPER_CALIBRATE on AXIS=X|Y, optional SAVE=1"
gcode:
  {% set axis = params.AXIS|default('X')|upper %}
  {% set save = params.SAVE|default(0)|int %}
  {% set s = printer.configfile.settings %}
  {% if 'resonance_tester' not in s %}
    RESPOND TYPE=error MSG="No [resonance_tester] section found. Configure ADXL first."
  {% else %}
    M117 IS Calibrate {axis}
    SHAPER_CALIBRATE AXIS={axis}
    {% if save == 1 %}
      SAVE_CONFIG
    {% else %}
      RESPOND TYPE=command MSG="Calibration complete. Use SAVE=1 to write values to printer.cfg"
    {% endif %}
  {% endif %}

[gcode_macro IS_RUN_BOTH]
description: "Run IS_TUNE_AXIS for X then Y, optional SAVE=1"
gcode:
  {% set save = params.SAVE|default(0)|int %}
  IS_TUNE_AXIS AXIS=X SAVE={save}
  IS_TUNE_AXIS AXIS=Y SAVE={save}

[gcode_macro IS_TEST_RESONANCE]
description: "TEST_RESONANCES AXIS=X|Y (requires resonance_tester)"
gcode:
  {% set axis = params.AXIS|default('X')|upper %}
  {% set s = printer.configfile.settings %}
  {% if 'resonance_tester' not in s %}
    RESPOND TYPE=error MSG="No [resonance_tester] section found. Configure ADXL first."
  {% else %}
    TEST_RESONANCES AXIS={axis}
  {% endif %}

# -------------------- Shake&Tune helpers -------------------------
[gcode_macro ST_HELP]
description: "Print Shake&Tune usage hints to the console"
gcode:
  RESPOND TYPE=command MSG="Shake&Tune: Use IS_TEST_RESONANCE AXIS=X|Y to record CSVs."
  RESPOND TYPE=command MSG="Then open the Shake&Tune panel in Mainsail/Fluidd to plot."
  RESPOND TYPE=command MSG="Klipper raw data usually lands in /tmp as resonances_*.csv"

[gcode_macro ST_SWEEP_BOTH]
description: "Sweep X then Y for Shake&Tune (generates CSVs in /tmp)"
gcode:
  {% set s = printer.configfile.settings %}
  {% if 'resonance_tester' not in s %}
    RESPOND TYPE=error MSG="No [resonance_tester] configured. Wire ADXL and add config first."
  {% else %}
    M117 Shake&Tune Sweep X
    TEST_RESONANCES AXIS=X
    M117 Shake&Tune Sweep Y
    TEST_RESONANCES AXIS=Y
    RESPOND TYPE=command MSG="Sweeps done. Open Shake&Tune UI to render graphs."
  {% endif %}

[gcode_macro ST_AFTER_CAL]
description: "Reminder to visualize results after SHAPER_CALIBRATE"
gcode:
  RESPOND TYPE=command MSG="Open Shake&Tune and select latest files to visualize your just-run calibration."
