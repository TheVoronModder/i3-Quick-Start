\
#!/usr/bin/env bash
set -euo pipefail

echo "== i3-quick-start :: installer (Kalico BE v2 compatible) =="

# --- Locate printer.cfg ---
CANDS=(
  "$HOME/printer_data/config/printer.cfg"
  "$HOME/klipper_config/printer.cfg"
)
PRN=""
for c in "${CANDS[@]}"; do [[ -f "$c" ]] && PRN="$c" && break; done
if [[ -z "${PRN:-}" ]]; then
  echo "ERROR: Could not find printer.cfg"; printf "Tried:\n - %s\n" "${CANDS[@]}"; exit 1
fi
CFG_DIR="$(dirname "$PRN")"
PACK_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
REPO_NAME="$(basename "$PACK_DIR")"

# --- Prompts (whiptail if available, fallback to read) ---
has_whiptail=0
if command -v whiptail >/dev/null 2>&1; then has_whiptail=1; fi

bed_default="235x235"
tool_default="i3_fans"
sensor_default="Beacon"
adxl_default="none"

if [[ $has_whiptail -eq 1 ]]; then
  BED=$(whiptail --title "Bed Size" --menu "Choose bed size" 18 62 6 \
   "180x180" "" "220x220" "" "235x235" "" "250x210" "" "300x300" "" "Custom" "" 3>&1 1>&2 2>&3) || true
  [[ -z "${BED:-}" ]] && BED="$bed_default"
  TOOL=$(whiptail --title "Toolhead" --menu "Choose toolhead" 14 60 2 \
   "i3_fans" "Classic part/hotend fans" "iPap" "CPAP toolhead" 3>&1 1>&2 2>&3) || true
  [[ -z "${TOOL:-}" ]] && TOOL="$tool_default"
  SENSOR=$(whiptail --title "Z-Probe" --menu "Choose sensor" 14 60 3 \
   "Beacon" "" "Cartographer" "" "None" "" 3>&1 1>&2 2>&3) || true
  [[ -z "${SENSOR:-}" ]] && SENSOR="$sensor_default"
  ADXL=$(whiptail --title "ADXL" --menu "Accelerometer location" 14 60 3 \
   "none" "" "toolhead" "" "frame" "" 3>&1 1>&2 2>&3) || true
  [[ -z "${ADXL:-}" ]] && ADXL="$adxl_default"
else
  read -rp "Bed size [180x180,220x220,235x235,250x210,300x300,Custom] (${bed_default}): " BED || true
  BED="${BED:-$bed_default}"
  read -rp "Toolhead [i3_fans/iPap] (${tool_default}): " TOOL || true
  TOOL="${TOOL:-$tool_default}"
  read -rp "Sensor [Beacon/Cartographer/None] (${sensor_default}): " SENSOR || true
  SENSOR="${SENSOR:-$sensor_default}"
  read -rp "ADXL [none/toolhead/frame] (${adxl_default}): " ADXL || true
  ADXL="${ADXL:-$adxl_default}"
fi

# Handle custom bed
if [[ "$BED" == "Custom" ]]; then
  read -rp "Enter bed width (mm): " BW; read -rp "Enter bed depth (mm): " BD
  BED="${BW}x${BD}"
fi

echo "Bed=$BED  Tool=$TOOL  Sensor=$SENSOR  ADXL=$ADXL"

# --- Write choices
CHOICES="$PACK_DIR/.choices.env"
cat > "$CHOICES" <<EOF
BED="$BED"
TOOL="$TOOL"
SENSOR="$SENSOR"
ADXL="$ADXL"
EOF

# --- Generate quickstart_overrides.cfg (simple python emitter) ---
OVR="$PACK_DIR/quickstart_overrides.cfg"
python3 - <<'PY' "$CHOICES" "$OVR"
import sys, re
env = {}
with open(sys.argv[1]) as f:
    for line in f:
        if "=" in line:
            k,v = line.strip().split("=",1)
            env[k]=v.strip().strip('"')
bed = env.get("BED","235x235")
tool = env.get("TOOL","i3_fans")
sensor = env.get("SENSOR","Beacon")
adxl = env.get("ADXL","none")
with open(sys.argv[2],"w") as o:
    o.write("# generated by i3-quick-start installer\\n")
    o.write("[gcode_macro I3QS_STATE]\\n")
    o.write(f"variable_bed: \"{bed}\"\\n")
    o.write(f"variable_tool: \"{tool}\"\\n")
    o.write(f"variable_sensor: \"{sensor}\"\\n")
    o.write(f"variable_adxl: \"{adxl}\"\\n")
    o.write("gcode: M118 I3QS_STATE loaded\\n")
PY

# --- Create quickstart.cfg hub with selected profiles ---
QS="$PACK_DIR/quickstart.cfg"
bed_token="${BED//x/_}"
{
  echo "[include macros/quick_start_core.cfg]"
  echo "[include macros/wizard_initial_setup.cfg]"
  echo "[include macros/tune_flow_line.cfg]"
  echo "[include macros/tune_pressure_advance.cfg]"
  echo "[include macros/shaper_scan_wrapper.cfg]"
  echo "[include quickstart_overrides.cfg]"
  if [[ -f "$PACK_DIR/profiles/bedsize_${bed_token}.cfg" ]]; then
    echo "[include profiles/bedsize_${bed_token}.cfg]"
  else
    echo "# NOTE: custom bed: please create profiles/bedsize_${bed_token}.cfg"
  fi
  echo "[include toolheads/${TOOL}.cfg]"
  if [[ "$SENSOR" == "Beacon" ]]; then
    echo "[include sensors/beacon_offsets_${TOOL}.cfg]"
  elif [[ "$SENSOR" == "Cartographer" ]]; then
    echo "[include sensors/carto_offsets_${TOOL}.cfg]"
  fi
} > "$QS"

# --- Patch printer.cfg include ---
INC="[include ${REPO_NAME}/quickstart.cfg]"
if ! grep -Fqx "$INC" "$PRN"; then
  cp -a "$PRN" "${PRN}.bak.$(date +%Y%m%d-%H%M%S)"
  { echo ""; echo "# added by i3-quick-start"; echo "$INC"; } >> "$PRN"
fi

# --- KlipperScreen assets & menu ---
KS="$HOME/KlipperScreen"
if [[ -d "$KS" ]]; then
  mkdir -p "$KS/styles/material-darker/icons/quickstart" "$KS/styles/material-darker/images/quickstart"
  cp -rf "$PACK_DIR/assets/icons/quickstart/." "$KS/styles/material-darker/icons/quickstart/" 2>/dev/null || true
  cp -rf "$PACK_DIR/assets/screens/." "$KS/styles/material-darker/images/quickstart/" 2>/dev/null || true

  CONF="$HOME/.config/KlipperScreen.conf"
  mkdir -p "$(dirname "$CONF")"
  if ! grep -q "^\[menu __quickstart\]$" "$CONF" 2>/dev/null; then
    cat >> "$CONF" <<'KSCFG'

[menu __quickstart]
name: Quick Start

[menu __quickstart initial_setup]
name: Initial Setup Wizard
gcode: INITIAL_SETUP
icon: quickstart/wizard.png

[menu __quickstart tune_flow]
name: Tune Flow
gcode: EZ_FLOW_TUNE
icon: quickstart/flow.png

[menu __quickstart tune_pa]
name: Tune Pressure Advance
gcode: EZ_PA_TUNE
icon: quickstart/pa.png

[menu __quickstart resonance]
name: Resonance Scan
gcode: EZ_SHAPER_SCAN
icon: quickstart/is.png
KSCFG
  fi
fi

# --- restart services (best effort) ---
sudo systemctl restart klipper || sudo service klipper restart || true
sudo systemctl restart KlipperScreen 2>/dev/null || true

echo "Install complete. Use KlipperScreen → Quick Start → Initial Setup."
